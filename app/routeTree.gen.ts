/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DeferredImport } from './routes/deferred'
import { Route as chatIndexImport } from './routes/(chat)/index'
import { Route as chatCIdImport } from './routes/(chat)/c/$id'

// Create/Update Routes

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const chatIndexRoute = chatIndexImport.update({
  id: '/(chat)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const chatCIdRoute = chatCIdImport.update({
  id: '/(chat)/c/$id',
  path: '/c/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/(chat)/': {
      id: '/(chat)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof chatIndexImport
      parentRoute: typeof rootRoute
    }
    '/(chat)/c/$id': {
      id: '/(chat)/c/$id'
      path: '/c/$id'
      fullPath: '/c/$id'
      preLoaderRoute: typeof chatCIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/deferred': typeof DeferredRoute
  '/': typeof chatIndexRoute
  '/c/$id': typeof chatCIdRoute
}

export interface FileRoutesByTo {
  '/deferred': typeof DeferredRoute
  '/': typeof chatIndexRoute
  '/c/$id': typeof chatCIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/deferred': typeof DeferredRoute
  '/(chat)/': typeof chatIndexRoute
  '/(chat)/c/$id': typeof chatCIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/deferred' | '/' | '/c/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/deferred' | '/' | '/c/$id'
  id: '__root__' | '/deferred' | '/(chat)/' | '/(chat)/c/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DeferredRoute: typeof DeferredRoute
  chatIndexRoute: typeof chatIndexRoute
  chatCIdRoute: typeof chatCIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  DeferredRoute: DeferredRoute,
  chatIndexRoute: chatIndexRoute,
  chatCIdRoute: chatCIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/deferred",
        "/(chat)/",
        "/(chat)/c/$id"
      ]
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/(chat)/": {
      "filePath": "(chat)/index.tsx"
    },
    "/(chat)/c/$id": {
      "filePath": "(chat)/c/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
